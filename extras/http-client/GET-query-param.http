
### Suche mit vorhandenem Namen
GET {{baseUrl}}?name=Alpha
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit vorhandenem Namen: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit vorhandenem Namen: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('GET mit vorhandenem Namen: body mit Daten', () => {
        const body = response.body;
        client.log(JSON.stringify(body))
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        // TODO Optional Chaining
        const filialen = body;
        client.assert(Array.isArray(filialen), `body: ${JSON.stringify(body)}`);
        client.assert(filialen.length > 0, `filialen: ${JSON.stringify(filialen)}`);
        filialen.map(filiale => filiale.name)
            .forEach(name => client.assert(name.includes('Alpha'), `filialen: ${JSON.stringify(filialen)}`));
    });
%}

### Suche mit nicht-vorhandenem Nachnamen
GET {{baseUrl}}?name=Nichtvorhanden
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit nicht-vorhandenem Nachnamen: Not Found', () => {
        const status = response.status;
        client.assert(status === 404, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit nicht-vorhandenem Nachnamen: leerer Body', () => {
        const body = response.body;
        client.assert(body === null, `body: ${JSON.stringify(body)}`);
    });
%}

### Suche mit vorhandener Email (mit URL Encoding)
GET {{baseUrl}}?email=admin%40acme.com
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit vorhandener Email: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit vorhandener Email: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('GET mit vorhandener Email: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'object', `body: ${JSON.stringify(body)}`);
        const filialen = body;
        client.assert(Array.isArray(filialen), `body: ${JSON.stringify(body)}`);
        client.assert(filialen.length === 1);
        const filiale = filialen[0];
        client.assert(filiale.email === 'admin@acme.com', `body: ${JSON.stringify(body)}`);
    });
%}

### Suche mit nicht-vorhandener Email
GET {{baseUrl}}?email=nicht%40vorhanden.com
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('GET mit nicht-vorhandener Email: Not Found', () => {
        const status = response.status;
        client.assert(status === 404, `Falscher Statuscode: ${status}`);
    });

    client.test('GET mit nicht-vorhandener Email: leerer Body', () => {
        const body = response.body;
        client.assert(body === null, `body: ${JSON.stringify(body)}`);
    });
%}

### Suche Nachnamen mit Praefix
GET {{baseUrl}}/name/A
Accept: application/json
Authorization: Basic {{userAdmin}} {{password}}

> {%
    client.test('Suche Nachnamen mit Praefix und admin: OK', () => {
      const status = response.status;
        client.assert(status === 200, `Falscher Statuscode: ${status}`);
    });

    client.test('Suche Nachnamen mit Praefix und admin: application/json', () => {
        const mimeType = response.contentType.mimeType;
        client.assert(mimeType === 'application/json', `Falscher MIME-Typ: ${mimeType}`);
    });

    client.test('Suche Nachnamen mit Praefix und admin: body mit Daten', () => {
        const body = response.body;
        client.assert(typeof body === 'string', `Falscher body: ${typeof body}`);
        const nachnamen = body.slice(1, body.length - 2).split(', ');
        client.assert(Array.isArray(nachnamen), `body: ${JSON.stringify(body)}`);
        client.assert(nachnamen.length > 0, `nachnamen: ${JSON.stringify(nachnamen)}`);
        nachnamen.forEach(nachname => nachname.startsWith('A'), `body: ${body}`);
    });
%}
